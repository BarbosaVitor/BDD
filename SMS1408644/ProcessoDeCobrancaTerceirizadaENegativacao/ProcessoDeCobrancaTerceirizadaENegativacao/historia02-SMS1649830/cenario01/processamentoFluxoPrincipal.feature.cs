// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProcessoDeCobrancaTerceirizadaENegativacao.Historia02_SMS1649830.Cenario01
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("")]
    public partial class Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "processamentoFluxoPrincipal.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "", @"  EU, como responsável pela controladoria,
  QUERO exportar a base de cobrança de beneficiários cancelados para a empresa terceirizada,
  PARA que esta possa realizar o processamento da cobrança e proceder com a negociação da dídiva junto ao responsável financeiro.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Processar a Rotina Arquivo Cobrança Terceirizada para envio dos documentos à empr" +
            "esa terceirizada")]
        [NUnit.Framework.CategoryAttribute("VERSAO_3.52")]
        [NUnit.Framework.CategoryAttribute("CONTROLE_FINANCEIRO")]
        [NUnit.Framework.CategoryAttribute("ROTINA_ARQUIVO_COBRANCA_TERCEIRIZADA")]
        [NUnit.Framework.CategoryAttribute("REMESSA")]
        [NUnit.Framework.CategoryAttribute("FLUXO_PRINCIPAL")]
        public virtual void ProcessarARotinaArquivoCobrancaTerceirizadaParaEnvioDosDocumentosAEmpresaTerceirizada()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Processar a Rotina Arquivo Cobrança Terceirizada para envio dos documentos à empr" +
                    "esa terceirizada", new string[] {
                        "VERSAO_3.52",
                        "CONTROLE_FINANCEIRO",
                        "ROTINA_ARQUIVO_COBRANCA_TERCEIRIZADA",
                        "REMESSA",
                        "FLUXO_PRINCIPAL"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
    testRunner.Given("uma rotina arquivo cobrança terceirizada", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 14
    testRunner.And("seja do tipo terceirizada", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 15
    testRunner.And("o tipo da terceirizada seja do tipo remessa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 16
    testRunner.When("forem preenchidos os campos do modelo documento relacionado a rotina", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 17
    testRunner.And("a rotina for processada", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 18
    testRunner.Then("deverá gerar um arquivo do tipo remessa contendo as informações de documentos dos" +
                    " beneficiários cancelados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

