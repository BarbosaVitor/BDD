// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace 02EmprestimoConsignado.Cenario02
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Realizar desconto de valores referentes a empréstimos negociados com a operadora")]
    public partial class RealizarDescontoDeValoresReferentesAEmprestimosNegociadosComAOperadoraFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "emprestimoComDoisPagamentosPrimeiraParte.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Realizar desconto de valores referentes a empréstimos negociados com a operadora", "EU, como responsável pelo pagamento da rede credenciada\r\nQUERO poder realizar a r" +
                    "etenção de rendimentos de prestadores\r\nPARA que seja possível descontar valores " +
                    "referentes a empréstimos negociados com a operadora.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credenciado com dois pagamentos na competência onde o primeiro atinge o valor tot" +
            "al do benefício")]
        [NUnit.Framework.CategoryAttribute("FLUXO_PRINCIPAL")]
        public virtual void CredenciadoComDoisPagamentosNaCompetenciaOndeOPrimeiroAtingeOValorTotalDoBeneficio()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Credenciado com dois pagamentos na competência onde o primeiro atinge o valor tot" +
                    "al do benefício", new string[] {
                        "FLUXO_PRINCIPAL"});
#line 8
    this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "PercentualDeRetencao",
                        "LimiteDeValorRetido"});
            table1.AddRow(new string[] {
                        "01",
                        "20",
                        "200"});
#line 9
    testRunner.Given("que existe um credenciado que deve pagar um percentual do valor a operadora", ((string)(null)), table1, "Dado ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "ValorApresentado",
                        "ValorGlosado",
                        "ValorAPagar",
                        "DescontoDeINSS",
                        "DescontoDeIRRF",
                        "ValorLiquido"});
            table2.AddRow(new string[] {
                        "01",
                        "2.000,00",
                        "200,00",
                        "1.800,00",
                        "164,39",
                        "219,66",
                        "1.415,95"});
#line 12
    testRunner.When("for realizado o faturamento do primeiro PEG", ((string)(null)), table2, "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "PercentualDeRetencao",
                        "ValorRetido",
                        "ValorLiquidoRepassado",
                        "ValorRemanescente"});
            table3.AddRow(new string[] {
                        "01",
                        "20",
                        "283,18",
                        "1.215,95",
                        "0,00"});
#line 15
    testRunner.Then("deverá repassar para o credenciado descontando o valor negociado", ((string)(null)), table3, "Então ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "ValorApresentado",
                        "ValorGlosado",
                        "ValorAPagar",
                        "DescontoDeINSS",
                        "DescontoDeIRRF",
                        "ValorLiquido"});
            table4.AddRow(new string[] {
                        "01",
                        "3.500,00",
                        "500,00",
                        "3.000,00",
                        "245,82",
                        "328,48",
                        "2.425,70"});
#line 18
    testRunner.And("ao realizar o faturamento do segundo PEG", ((string)(null)), table4, "E ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "PercentualDeRetencao",
                        "ValorRetido",
                        "ValorLiquidoRepassado",
                        "ValorRemanescente"});
            table5.AddRow(new string[] {
                        "01",
                        "20",
                        "0,00",
                        "2.425,70",
                        "0,00"});
#line 21
    testRunner.Then("não deverá ser gerado nenhum desconto referente a emprestimo consignado pois o va" +
                    "lor mensal já foi descontado no primeiro faturamento", ((string)(null)), table5, "Então ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

