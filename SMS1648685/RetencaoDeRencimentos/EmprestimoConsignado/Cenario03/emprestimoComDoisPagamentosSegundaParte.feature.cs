// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace 02EmprestimoConsignado.Cenario03
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Realizar desconto de valores referentes a empréstimos negociados com a operadora")]
    public partial class RealizarDescontoDeValoresReferentesAEmprestimosNegociadosComAOperadoraFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "emprestimoComDoisPagamentosSegundaParte.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Realizar desconto de valores referentes a empréstimos negociados com a operadora", "EU, como responsável pelo pagamento da rede credenciada\r\nQUERO poder realizar a r" +
                    "etenção de rendimentos de prestadores\r\nPARA que seja possível descontar valores " +
                    "referentes a empréstimos negociados com a operadora.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Prestador credenciado com dois pagamentos na competência onde o primeiro não atin" +
            "ge o valor total do empréstimo negociado")]
        [NUnit.Framework.CategoryAttribute("FLUXO_PRINCIPAL")]
        public virtual void PrestadorCredenciadoComDoisPagamentosNaCompetenciaOndeOPrimeiroNaoAtingeOValorTotalDoEmprestimoNegociado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prestador credenciado com dois pagamentos na competência onde o primeiro não atin" +
                    "ge o valor total do empréstimo negociado", new string[] {
                        "FLUXO_PRINCIPAL"});
#line 8
    this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "PercentualDeRetencao",
                        "LimiteDeValorRetido"});
            table1.AddRow(new string[] {
                        "01",
                        "2,5",
                        "200,00"});
            table1.AddRow(new string[] {
                        "02",
                        "5,0",
                        "320,00"});
#line 9
    testRunner.Given("um prestador credenciado que deve pagar pensão alimentícia", ((string)(null)), table1, "Dado ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "ValorApresentado",
                        "ValorGlosado",
                        "ValorAPagar",
                        "DescontoDeINSS",
                        "DescontoDeIRRF",
                        "ValorLiquido"});
            table2.AddRow(new string[] {
                        "01",
                        "7.000,00",
                        "200,00",
                        "6.800,00",
                        "621,04",
                        "829,86",
                        "5.349,10"});
            table2.AddRow(new string[] {
                        "02",
                        "7.500,00",
                        "250,00",
                        "7.250,00",
                        "662,13",
                        "884,77",
                        "5.703,10"});
#line 13
    testRunner.When("um PEG for faturado", ((string)(null)), table2, "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "PercentualDeRetencao",
                        "ValorRetido",
                        "ValorLiquidoRepassado",
                        "ValorRemanescente"});
            table3.AddRow(new string[] {
                        "01",
                        "2,5",
                        "133,72",
                        "5215,37",
                        "66,28"});
            table3.AddRow(new string[] {
                        "02",
                        "5,0",
                        "285,15",
                        "5.417,95",
                        "34,85"});
#line 17
    testRunner.Then("restará ainda um valor para quitação", ((string)(null)), table3, "Então ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "ValorApresentado",
                        "ValorGlosado",
                        "ValorAPagar",
                        "DescontoDeINSS",
                        "DescontoDeIRRF",
                        "ValorLiquido"});
            table4.AddRow(new string[] {
                        "01",
                        "1.250,00",
                        "0,00",
                        "1.250,00",
                        "114,16",
                        "152,54",
                        "1.010,72"});
            table4.AddRow(new string[] {
                        "02",
                        "2.050,00",
                        "50,00",
                        "2.000,00",
                        "182,65",
                        "244,07",
                        "1.573,28"});
#line 21
    testRunner.And("quando for realizado o faturamento de um segundo PEG", ((string)(null)), table4, "E ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "PercentualDeRetencao",
                        "ValorRetido",
                        "ValorLiquidoRepassado",
                        "ValorRemanescente"});
            table5.AddRow(new string[] {
                        "01",
                        "2,5",
                        "25,26",
                        "985,45",
                        "41,02"});
            table5.AddRow(new string[] {
                        "02",
                        "5,0",
                        "78,66",
                        "1.538,43",
                        "0,00"});
#line 25
    testRunner.Then("deverá gerar um desconto referente ao empréstimo consignado ainda não quitado no " +
                    "mês", ((string)(null)), table5, "Então ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

